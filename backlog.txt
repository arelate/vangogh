Backend

- expand activityContextCreated tracking to all activityContexts

- add last modified to the index (and transparently - data controller) and methods to get last modified stamp for id, or all objects that were modified on or after that stamp

- add last modified to track start of the activities

- modify (again) console output controller to use "single line control" and output only on one line. One idea is to collapse to ellipsis all earlier steps if the content doesn't fit

- complete spliting delegates from controllers

- use updateData-updated last modified and add all modified accountProducts to updated (as well as flagged as updated) 

- add updateData-updated action

- change clear updated from unconditional clearing to receipt based system. To clear updated we'll need successful completion of several activities since product was added as updated:
-- need to track when product was modified, updated
-- need to define this dependency system
-- need to change clear updated model to check everything above

- investigate /user/data/games (from https://www.gog.com/forum/general/unofficial_gog_api_documentation/page2) and game_type == pack specifically

- activityQueueBacklog:

	need: help activity that outputs information about built-in commands, list of aliases and what they expand to, as well as list of pre- and postReqs

	need: search-products, search-accountProducts, search-gameDetails, etc. + alias "search" (all together, each operation lists separate results)

	design alternatives:
	- (no - requires deserialization) use only text fields for search
	- (no - would hit too much of internal data) use serialized entry
	- (yes, and would be required for frontends as well) build search index with viewModels and new activity (update-searchIndex, should be postReq for many activities)
	- search outputs a list of productCore (id,title)
	- this might require to add Results to ActivityStatus - not sure if string, ProductCore yet (would be great to have the ProductCore)

	need: activityStatuses reported from the activityQueue should present clear results. Need to think more about how the queue affects result output - e.g. does it happen at the end (likely)? after every activity in the queue (not likely)? how this affects current results presentation, etc. - need to think of this through the context of aliases (e.g. search), doesn't make sense to show and remove intermediate information - would be great to collate end results in meaningful way

- change functional controllers to work on product model type and have activities loop updates using those 

- introduce repair controllers - chunks repair (download by chunk, validate by chunk); validationFileIsNotValid (see if XML can't be loaded and do simple text transforms for known issues)

- [Backlog] consider whitelists, blacklists for product operations

- [Backlog] serve data and frontend files via http or better yet websockets server

- debug data validation - why stored file md5 doesn't match precomputed hash at push (encoding? special characters?)

- unit tests

Frontend:

- es6 modules, fetch, promises, custom properties
- move to a new data model with data controllers and dynamic data loading
- Use notifications API on web client view on updates
- motion
- mobile layouts