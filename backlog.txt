Backend

- Implement recordsContoller to track created/modified/deleted/started/completed for an id
-- Track CRUD operations for index/dataControllers [done]
-- Track started/completed for activities (starting with PageResultUpdateActivity) [done]
-- Reimplement updateData-updated to use the following conditions:
1) set products that have isNew, Updates>0 as updated
2) set products that were created/updated between "updateData-accountProducts" started and completed as updated

- change clear updated from unconditional clearing to recordsContoller based system. 
To clear updated we'll need successful completion of several activities since product was added as updated:
-- the moment product updated entry was modified is T0
-- Since T0, there should be the following events on the product timeline:
-- gameDetails activity should have been started and completed at Tgda > T0;
-- gameDetails for this product modified at Tgd > Tgda;
-- product files download should have been started and completed at Tpfd > Tgd;
-- product files validation should have been started and completed at Tv > Tpfd;

- add read/write through cache for dataController

- modify (again) console output controller to use "single line control" and output only on one line. One idea is to collapse to ellipsis all earlier steps if the content doesn't fit

- complete splitting delegates from controllers

- investigate /user/data/games (from https://www.gog.com/forum/general/unofficial_gog_api_documentation/page2) and game_type == pack specifically

- activityQueueBacklog:

	need: help activity that outputs information about built-in commands, list of aliases and what they expand to, as well as list of pre- and postReqs

	need: search-products, search-accountProducts, search-gameDetails, etc. + alias "search" (all together, each operation lists separate results)

	design alternatives:
	- (yes, and would be required for frontends as well) build search index with viewModels and new activity (update-searchIndex, should be postReq for many activities)
	- search outputs a list of productCore (id,title)
	- this might require to add Results to ActivityStatus - not sure if string, ProductCore yet (would be great to have the ProductCore)

	need: activityStatuses reported from the activityQueue should present clear results. Need to think more about how the queue affects result output - e.g. does it happen at the end (likely)? after every activity in the queue (not likely)? how this affects current results presentation, etc. - need to think of this through the context of aliases (e.g. search), doesn't make sense to show and remove intermediate information - would be great to collate end results in meaningful way

- change functional controllers to work on product model type and have activities loop updates using those 

- introduce repair controllers - chunks repair (download by chunk, validate by chunk); validationFileIsNotValid (see if XML can't be loaded and do simple text transforms for known issues)

- [Backlog] consider whitelists, blacklists for product operations

- [Backlog] serve data and frontend files via http or better yet websockets server

- debug data validation - why stored file md5 doesn't match precomputed hash at push (encoding? special characters?)

- unit tests

Frontend:

- es6 modules, fetch, promises, custom properties
- move to a new data model with data controllers and dynamic data loading
- Use notifications API on web client view on updates
- motion
- mobile layouts