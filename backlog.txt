Backend

- consider transitioning to a full command line tool accepting command line parameters:
	-- update-data, update-downloads, download, validate-files, validate-data, repair, cleanup
	-- parameters can be product ids or no parameters (=all, updated)
	-- for individual operations show output at the end
	-- implement sync shortcut which is basically today's operation. Rename flightPlan.json to sync.json

- change functional controllers to work on product model type and have activities loop updates using those 

- introduce repair controllers - chunks repair (download by chunk, validate by chunk); validationFileIsNotValid (see if XML can't be loaded and do simple text transforms for known issues)

- [Backlog] consider whitelists, blacklists for product operations

- [Backlog] serve data and frontend files via http or better yet websockets server

- persist cookies from session to session (.net core 2.0?), or at least allow injecting cookies from the browser session (should be doable in .net core 1.1)

- add validate data operation that uses hashes and validates md5

- unit tests

Frontend:

- es6 modules, fetch, promises, custom properties
- move to a new data model with data controllers and dynamic data loading
- Use notifications API on web client view on updates
- motion
- mobile layouts