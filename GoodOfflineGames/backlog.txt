Backend

- images download don't even schedule if file exists (doesn't apply to files)

- for bulk data changes accumulate index changes and do in bulk as well

- Modify cleanup controller to use same wireframe logic - enumerate, find difference, move to recycle bin

- As part of the change implement enumeration explicitly on top of game details, not Id

- Review validation download logic to try and simplify similar to newUpdated from account, esp. Given that it has session - good chance to deprecate session controller as well

- also don't schedule download if validation file exists

- check if validation files are moved to recycleBin

- guard product files and validation files download with the throttleController, or better yet introduce rate limiter based on URL and time between requests add it to networkController so that it's transparent for the users

- make hashes more resilient to crashes

- add Log entries to taskStatus to log additional debug information like inputs, processed, etc.?

- log existing files download attempts

- log changelog for updated

- repair controller?
	- validate full file and return validation results with all failing chunks and specific validation problems
	- consolidate validation report and schedule repair
	- refactor download controller to download range

- serve data and frontend files via http

- current task activities are monolithic - consider breaking them apart somehow for testability

- unit tests

Frontend:

- es6 modules, fetch, promises, custom properties
- move to a new data model with data controllers and dynamic data loading
- Use notifications API on web client view on updates
- motion
- mobile layouts